#!/bin/bash

# Running batch files through cmd.exe is WSL-specific (see also https://docs.microsoft.com/en-us/windows/wsl/interop#run-windows-tools-from-wsl)
# We don't need to run batch files through cmd.exe from Cygwin/MinGW (e.g. Git Bash) (--serverlist doesn't seem to work properly when run through cmd.exe)
# TODO: Generalize this, or branch this based on detected environment. See also https://github.com/Microsoft/WSL/issues/1917
vimCmd='cmd.exe /C vim.bat'
gvimCmd='cmd.exe /C gvim.bat'

show_usage() {
cat <<USAGE
Usage: ${0##*/} [-h] [-t] [--] <files/paths list>
       -h Show this help
       -t Use vim's remote-tab
USAGE
}

# Parse options
# Reset OPTIND in case getopts was used previously
OPTIND=1
while getopts "ht" opt; do
	case "$opt" in
		h)
			show_usage
			exit 0
			;;
		t)
			remoteOption='remote-tab-silent'
			;;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# Use a vim server whose name will be based on the current path.
# If inside a Git repo, use the repo top level directory name.
# Otherwise, use the current working directory name.
workingDir='ROOT'
git rev-parse 2> /dev/null  # `git rev-parse` will exit with a non-zero status code when called outside a git repo
if [ $? -eq 0 ]; then
	# We are in a Git repo
	workingDir=$(basename $(git rev-parse --show-toplevel))
else
	printf -v workingDir '%s' "${PWD##*/}"
fi

# $workingDir will be empty if at the root directory; set a ROOT servername
serverName="${workingDir:-ROOT}"

vimOpts="--servername '$serverName'"

# Set up options and filenames if a file (arg) list is specified
if [ $# -gt 0 ]; then
	vimOpts="$vimOpts --${remoteOption:-remote-silent}"

	# Retain literal whitespace in filenames by wrapping in quotes
	filesList=()
	while (( "$#" )); do
		filesList+=("'$1'")
		shift
	done

	# When there isn't an existing server instance with the specified name, vim will first start a new instance
	# with a [No Name] buffer before loading the specified files for editing. We want to delete that empty buffer
	# so that there isn't an extra buffer loaded.
	# fgrep: search for a fixed (non-RE) pattern
	# options:
		# i: ignore-case
		# q: quiet
		# x: match only entire lines
		# **Windows-specific:** gvim --serverlist will return a list containing Windows newlines (\r\n). WSL fgrep -x option will only detect Unix newlines (\n), so we need to convert it prior to grepping.
	if ! $vimCmd --serverlist | sed 's/\r$//' | fgrep -iqx "$serverName"; then
		# A new server instance will be started; delete the empty buffer
		vimOpts="$vimOpts +bdelete1"
	fi
fi

eval "$gvimCmd $vimOpts ${filesList[@]}"
