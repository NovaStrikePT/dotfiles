#!/bin/bash

##
# Show script usage
##
show_usage() {
cat <<USAGE
Usage:
	${0##*/} <search_string> <file_extensions> [-x <exclude_pattern>] [<search_path>]

	<search_string> is a pattern passed to grep.
	<file_extensions> should be a string with vertical bar separated values.
	<exclude_pattern> will be matched anywhere in the find path.

Example:
	#Search starting at the current working directory for files with extension .php, .java, .js, excluding any paths that have .git or lib directories
	${0##*/} '^function\\s\\+' 'php|java|js' -x '/(\.git|lib)/' .
USAGE
}

# Search string should be first positional argument
# File extension pattern the second
#
if [ -z "$1" ]; then
	echo 'search_string is required'
	show_usage >&2
	exit 1
elif [ -z "$2" ]; then
	echo 'file_extension is required'
	show_usage >&2
	exit 1
fi
search_string="$1"
include_pattern="$2"
shift 2

# Parse options
#
# Reset OPTIND in case getopts was used previously
OPTIND=1
while getopts "x:" opt; do
	case "$opt" in
		x)
			exclude_pattern=$OPTARG
			;;
	esac
done

# The next positional argument, if it is given, should be the search path
#
shift "$((OPTIND-1))" # Shift off the options and optional --.
if [ -n "$1" ]; then
	working_dir="$1"
else
	working_dir='.'
fi

# Build name pattern arguments string
#
filesearch_args="-type f -iregex '.*\\.($include_pattern)'"

# Build path pruning arguments string
#
if [ -n "$exclude_pattern" ]; then
	prune_args="-iregex '.*$exclude_pattern.*' -prune -o"
fi

# Execute the search
#
search_cmd="find -E '$working_dir' $prune_args $filesearch_args -print0 | xargs -0 grep --color=auto -Hn '$search_string'"
echo "$search_cmd"
eval "$search_cmd"
